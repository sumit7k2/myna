scalar DateTime

# Users
 type User {
  id: ID!
  username: String!
  name: String!
  avatarUrl: String
  bio: String
  followersCount: Int!
  followingCount: Int!
  viewerIsFollowing: Boolean!
 }

# Topics
 type Topic {
  id: ID!
  name: String!
  slug: String!
}

# Posts
 type Post {
  id: ID!
  author: User!
  content: String!
  createdAt: DateTime!
  likesCount: Int!
  viewerHasLiked: Boolean!
  topics: [Topic!]!
  # New fields for post detail thread
  replyCount: Int!
  viewerCanReply: Boolean!
  replyRationale: String
  replies(after: String, first: Int): ReplyConnection!
 }

 # Replies
 type Reply {
  id: ID!
  author: User!
  content: String!
  createdAt: DateTime!
  likesCount: Int!
  viewerHasLiked: Boolean!
  postId: ID!
 }

 type ReplyEdge {
  cursor: String!
  node: Reply!
 }

 type ReplyConnection {
  edges: [ReplyEdge!]!
  pageInfo: PageInfo!
 }

 # Collections
 type Collection {
  id: ID!
  name: String!
  posts(after: String, first: Int): PostConnection!
 }

 # Notifications
 enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  SYSTEM
 }
 
 type Notification {
  id: ID!
  message: String!
  createdAt: DateTime!
  read: Boolean!
  type: NotificationType!
  postId: ID
  username: String
 }

 # Pagination
 type PageInfo {
  hasNextPage: Boolean!
  endCursor: String
 }

 type PostEdge {
  cursor: String!
  node: Post!
 }

 type PostConnection {
  edges: [PostEdge!]!
  pageInfo: PageInfo!
 }

 type NotificationEdge {
  cursor: String!
  node: Notification!
 }

 type NotificationConnection {
  edges: [NotificationEdge!]!
  pageInfo: PageInfo!
 }

# Auth
 type AuthTokens {
  accessToken: String!
  refreshToken: String!
}

 type AuthPayload {
  tokens: AuthTokens!
  user: User!
}

 type RefreshPayload {
  accessToken: String!
}

# AI Rewrite
 input RewriteInput {
  content: String!
  style: String
}

 type RewriteResult {
  content: String!
  confidence: Float!
}

# Root operations
 type Query {
  me: User
  user(username: String!): User
  feed(after: String, first: Int): PostConnection!
  post(id: ID!): Post
  topics: [Topic!]!
  collections(userId: ID): [Collection!]!
  notifications(after: String, first: Int): NotificationConnection!
  # Older sample query kept for compatibility
  posts: [Post!]!
 }

 type Mutation {
  login(email: String!, password: String!): AuthPayload!
  signup(email: String!, password: String!, name: String!): AuthPayload!
  refresh(refreshToken: String!): RefreshPayload!
  saveUserTopics(topicIds: [ID!]!): Boolean!
  likePost(postId: ID!): Post!
  likeReply(replyId: ID!): Reply!
  createPost(content: String!, topicIds: [ID!]): Post!
  createReply(postId: ID!, content: String!): Reply!
  rewritePost(input: RewriteInput!): RewriteResult!
  toggleFollow(userId: ID!): User!
  # Collections management
  createCollection(name: String!): Collection!
  addToCollection(collectionId: ID!, postId: ID!): Collection!
 }
